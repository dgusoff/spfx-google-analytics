{"version":3,"sources":["extensions/analytics/AnalyticsApplicationCustomizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,8DAAiD;AACjD,sEAEwC;AAGxC,+DAAiE;AAEjE,IAAM,UAAU,GAAW,gCAAgC,CAAC;AAW5D,qFAAqF;AACrF;IACU,kDAAoE;IAD9E;;IAuCA,CAAC;IAnCQ,+CAAM,GAAb;QAEE,IAAI,UAAU,GAAW,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QACpD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,qBAAG,CAAC,IAAI,CAAC,UAAU,EAAE,KAAG,OAAO,CAAC,SAAW,CAAC,CAAC;QAC/C,CAAC;QAAA,IAAI,CAAA,CAAC;YACJ,IAAI,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAClD,UAAU,CAAC,IAAI,GAAG,iBAAiB,CAAC;YACpC,UAAU,CAAC,GAAG,GAAG,iDAA+C,UAAY,CAAC;YAC7E,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC;YACxB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAEtC,IAAI,CAAC,8KAIgB,UAAU,gBAC9B,CAAC,CAAC;QACL,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEM,6DAAoB,GAA3B;QACE,IAAI,UAAU,GAAW,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QACpD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE;YAChD,IAAI,CAAC,kKAIc,UAAU,cAC9B,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;IAlCD;QADC,qBAAQ;gEAsBR;IAcH,qCAAC;CAvCD,AAuCC,CAtCS,+CAAyB,GAsClC;kBAvCoB,8BAA8B","file":"extensions/analytics/AnalyticsApplicationCustomizer.js","sourcesContent":["import { override } from '@microsoft/decorators';\r\nimport { Log } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseApplicationCustomizer\r\n} from '@microsoft/sp-application-base';\r\nimport { Dialog } from '@microsoft/sp-dialog';\r\n\r\nimport * as strings from 'AnalyticsApplicationCustomizerStrings';\r\n\r\nconst LOG_SOURCE: string = 'AnalyticsApplicationCustomizer';\r\n\r\n/**\r\n * If your command set uses the ClientSideComponentProperties JSON input,\r\n * it will be deserialized into the BaseExtension.properties object.\r\n * You can define an interface to describe it.\r\n */\r\nexport interface IAnalyticsApplicationCustomizerProperties {\r\n  trackingID: string;\r\n}\r\n\r\n/** A Custom Action which can be run during execution of a Client Side Application */\r\nexport default class AnalyticsApplicationCustomizer\r\n  extends BaseApplicationCustomizer<IAnalyticsApplicationCustomizerProperties> {\r\n\r\n  @override\r\n  public onInit(): Promise<void> {\r\n    \r\n    let trackingID: string = this.properties.trackingID;\r\n    if (!trackingID) {\r\n      Log.info(LOG_SOURCE, `${strings.MissingID}`);\r\n    }else{\r\n      var gtagScript = document.createElement(\"script\");\r\n      gtagScript.type = \"text/javascript\";\r\n      gtagScript.src = `https://www.googletagmanager.com/gtag/js?id=${trackingID}`;    \r\n      gtagScript.async = true;\r\n      document.head.appendChild(gtagScript);  \r\n\r\n      eval(`\r\n        window.dataLayer = window.dataLayer || [];\r\n        function gtag(){dataLayer.push(arguments);}\r\n        gtag('js', new Date());    \r\n        gtag('config',  '${trackingID}');\r\n      `);\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  public AttachNavigatedEvent(){\r\n    let trackingID: string = this.properties.trackingID;\r\n    this.context.application.navigatedEvent.add(this, () => {\r\n      eval(`\r\n      window.dataLayer = window.dataLayer || [];\r\n      function gtag(){dataLayer.push(arguments);}\r\n      gtag('js', new Date());\r\n      gtag('config',  '${trackingID}');\r\n    `);\r\n    console.log(\"accessing from navigated event\");\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}